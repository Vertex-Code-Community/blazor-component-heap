@typeparam TItem

<div id="@_panelId"
     class="@($"bch-component bch-draggable-panel {CssClass} {(_startDrag ? "bch-start-drag" : "")} {DraggableContext.ContextIdentifier} {GetThemeCssClass()}")"
     style="@($"gap: {Gap}px;")">

    @for (var i = 0; i < Items.Count; i++)
    {
        var item = Items[i];
        var itemWidth = TabWidthPredicate.Invoke(item);
        var draggingItemWidth = DraggableContext.DraggingItem is not null 
            ? TabWidthPredicate.Invoke(DraggableContext.DraggingItem)
            : 0;

        <div @key="item"
             style="@($"min-width: {(_hoveredItem == item ? (itemWidth + draggingItemWidth + Gap) : itemWidth).ToString(_nF)}px; ")"
             class="@($"bch-item n-{i} _cls_item_{_panelId} {(_draggingItem == item ? "bch-dragging " : "")} {(_hoveredItem == item ? "bch-hovered " : "")}")">

            <div class="bch-before"
                 style="@($"{(_hoveredItem == item && _direction ? $"max-width: {(DraggableContext.DraggingBounds.X + Gap).ToString(_nF)}px;" : "")}")">
            </div>

            <div class="bch-content-wrapper"
                 style="width: @($"{itemWidth}px");"
                 @oncontextmenu="OnContextMenuAsync"
                 @onbchtabsmousedown="async e => { await OnMouseDownAsync(item, (float)e.PageX, (float)e.PageY, e.X, e.Y, e.PathCoordinates); }"
                 @onbchtabstouchstart="async e => { var t = e.Touches[0]; await OnMouseDownAsync(item, t.PageX, t.PageY, t.X, t.Y, e.PathCoordinates); }">
                
                @ItemTemplate(item)
                
            </div>

            <div class="bch-after"
                 style="@($"{(_hoveredItem == item && !_direction ? $"max-width: {(DraggableContext.DraggingBounds.X + Gap).ToString(_nF)}px;" : "")}")">
            </div>

        </div>
    }
</div>